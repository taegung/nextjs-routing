#1. 메인 페이지 렌더링
    app/page.js 를 통한 메인 페이지 렌더링 방식 이해

#2. 기본 라우팅
    localhost:3000/about
    localhost:3000/profile 경로로 접근하고 싶을 경우,
    
    라우팅과 관련된 파일 작성은 app/ 내부에 작성
    -> App router 메커니즘

    존재하지 않거나 잘못된 경로(abut, dashboard)로 요청 시, Next.js는 자동으로 기본 404 페이지를 응답함

#3. 중첩 라우팅(Nested)
    localhost:3000/blog -> 블로그의 메인 페이지
    localhost:3000/blog/cookie -> 쿠키와 관련된 포스팅 페이지
    localhost:3000/blog/milk -> 우유 관련된 포스팅 페이지
    
    폴더 경로를 중첩하여 작성하면 됨

#4. 동적 라우팅(Dynamic)

    localhost:3000/products -> product1
                               product2
                               product3
    
    만약 사용자가 localhost:3000/products/id -> id에 해당하는 특정 상품의 상세 페이지로 이동하도록
    ex) localhost:3000/products/1 -> Product 1 details
        localhost:3000/products/2 -> Product 2 details

    products/[productId]와 같이 '[]' 문법을 활용하여 동적으로 라우팅이 처리될 수 있도록 적용

#5. 중첩 동적 라우팅
    localhost:3000/products/1 -> 상품 1 상세 페이지
    localhost:3000/products/1/reviews/1 -> 상품 1의 1번째 리뷰

    + Next.js 15 버전 업그레이드에 따른 Dynamic API(params) 설정 적용
    Ref. https://nextjs.org/docs/messages/sync-dynamic-apis

    Q. products/[id]와 reviews/[id]와 같이 중첩된 단일 라우트에서 id변수를 동일하게 할 경우 ?
    변수명이 같아서 충돌 에러 발생, productId, reviewId로 작성해야함

#6. 모든 세그먼트 처리하기

    localhost:3-/docs/feature1/concept1

    docs/[...slug] 로 작성 시 아래의 모든 경로의 세그먼트들을 다 잡아줌
    -> 
       localhost:3-/docs/routing
       localhost:3-/docs/routing/dynamic
       localhost:3-/docs/routing/dynamic/etc..

#7. 404 페이지 처리하기(커스터마이징)

    - Next.js에서 제공하는 기본 404페이지가 아닌 별도의 디자인으로 커스터마이징하고 싶을 때
        -> not-found.jsx로 생성 가능
        localhost:3000/where과 같이 존재하지 않는 경로로 테스트해보기

    - 특정 페이지 및 조건부에 따른 Not-found 처리

    localhost:3000/products/1/review/1
    localhost:3000/products/1/review/2
    ...
    localhost:3000/products/1/review/10까지는 응답하지만

    localhost:3000/products/1/review/15와 같이 10을 초과한 경로는 Not found 처리되도록

#8. 컴포넌트와 페이지를 구분해서 렌더링하기

    page.js와 같은 특별한 네이밍 외에
    line-chart.jsx와 같이 Next.js에서 별도로 지정하지 않은 파일명은 public 경로로 라우팅되지 않음
    -> lh:3-/dashboard/line-chart로 접속 시 404가 응답됨

#8-1. app/ 폴더와 components/ 폴더로 구분하여 폴더별로 역할 명확화
    Next.js가 권장하는 기본 규칙은 app/ 폴더는 public으로 라우팅이 가능한 컴포넌트들만 모아두는 것
    line-chart.jsx와 같은 컴포넌트 그 자체로 생성된 파일은 라우팅 용도가 아닌,
    특정 페이지에 렌더링되는 컴포넌트로 사용됨

    -> 최상단에 components/라는 폴더 생성 후 line-chart.jsx를 해당 폴더로 이동하여 구분하기
    목적에 따라, 세분화 정도에 따라 dashboard와 관련된 컴포넌트들은 components/dashboard/로 정리할 수도 있음

#9. 숨김 폴더 활용하기

    라우팅 로직을 결정해주는 유틸 함수인데, public 라우팅으로는 동작할 필요가 없을 경우?
    -> _(underscore)를 작성하여 숨김 폴더로 활용 가능

    localhost:3000/_utils로 접근 시, 404 페이지가 응답됨

    숨김 폴더 활용 예
    1. 범용적인 라우팅 로직이 있어서 별도의 유틸 함수로 빼고 싶을 때
    2. 프로젝트 내부에서만 관리되는 파일 보관 시

#10. 라우트 그룹핑하기
    인증을 구현한다고 할 때, 각 기능별로 필요한 페이지 라우트 경로를 구성한다면,
    forgot-password/
    register/
    login/과 같이 인증과 관련된 폴더들이 흩어져있으면 관리가 복잡해짐

    auth/란 루트 폴더를 생성 후 위 폴더들을 중첩하기

    이렇게 하면 가능은 하지만, 모든 URL 경로에 auth/가 추가됨
    결국 auth라는 경로는 숨기고 싶을 때, ()를 활용해서 (auth)와 같이 작성하면
    auth 경로를 생략하고 활용 가능

    -> ()를 활용한 폴더링은 비슷한 관심사끼리 모아둘 수 있는 기능을 제공

#11. 페이지 레이아웃 관리하기(layout.jsx)

    layout.jsx를 통해 특정 라우트에 해당하는 기본 레이아웃을 관리할 수 있음
    ** 해당 컴포넌트는 꼭 children props를 받도록 해야함
    -> 하위 페이지 렌더링할 때 사용되어야 하기 때문에

    layout.js도 page.js와 같이 Next.js에서 제공하는 컨벤션이 적용된 특별한 파일
    해당 라우트에 적용될 레이아웃 구성할 때 사용

    추후 <header>, <footer> 역시 별도의 UI 컴포넌트로 작성하여 app/layout.jsx에 import할 수도 있음

#12. 중첩 레이아웃 구성하기

    개별 Product 상세 페이지에 별도의 레이아웃을 추가하고 싶은 경우,
    -> products/[productId]/layout.jsx 생성

    [productId]/하단에 생성하였기 때문에 lh:3-/products에는 레이아웃이 적용되지 않지만,
    lh:3-/products/1, 2와 같은 페이지에는 레이아웃이 추가 적용되었음

    app/layout.js의 children이 products/[productId]/layout.js 파일을 렌더링함
    즉, children을 타고 내려가면서 렌더링이 진행됨

#13. Link 컴포넌트를 통해 페이지 네비게이션하기
    사용자는 URL을 직접 수정해가며 페이지를 탐색하지 않기 때문에 
    하이퍼링크나 버튼과 같은 액션을 통해 페이지를 탐색할 수 있도록 제공해야함
    
    메인 페이지(lh:3-/)에서 blog 버튼 선택 시 lh:3-/blog 경로로 이동할 수 있도록 구현

#14. 활성 링크 적용하기
    사용자가 현재 어느 페이지에 접속 중인지 확인할 수 있는 활성 링크 적용